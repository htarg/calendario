{"version":3,"sources":["components/CustomTextArea.js","constants.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["CustomTextArea","id","title","value","onChange","className","htmlFor","DEFAULT_DATE_FORMAT","DEFAULT_DAYS_OFFSET","DATE_REGEX","replacer","match","date","offset","string","moment","add","format","convert","text","replace","copyTextByElementId","elementId","originElementId","element","document","getElementById","select","setSelectionRange","execCommand","focus","INPUT_ELEMENT_ID","OUTPUT_ELEMENT_ID","App","useState","input","setInput","output","setOutput","useEffect","timeout","setTimeout","ToastsStore","success","clearTimeout","event","target","store","position","ToastsContainerPosition","TOP_CENTER","lightBackground","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAWeA,G,MATQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,MAAd,IAAqBC,gBAArB,MAAgC,KAAhC,SACrB,6BACE,yBAAKC,UAAU,eACb,2BAAOC,QAASL,GAAKC,GACrB,8BAAUD,GAAIA,EAAIE,MAAOA,EAAOC,SAAUA,Q,gBCNnCG,EAAsB,WACtBC,EAAsB,IAEtBC,EAAa,sBCA1B,SAASC,EAASC,EAAOC,EAAMC,EAAQC,GACrC,OAAOC,IAAOH,EAAML,GACjBS,IAAIR,EAAqB,QACzBS,OAAOV,GAGL,IAAMW,EAAU,SAAAC,GAAI,OAAIA,EAAKC,QAAQX,EAAYC,IAE3CW,EAAsB,SAACC,EAAWC,GAC7C,IAAMC,EAAUC,SAASC,eAAeJ,GAExCE,EAAQG,SACRH,EAAQI,kBAAkB,EAAG,OAE7BH,SAASI,YAAY,QAECJ,SAASC,eAAeH,GAChCO,SCbVC,EAAmB,QACnBC,EAAoB,SAgCXC,MA9Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,KAgBb,OAZAC,qBAAU,WACRD,EAAUpB,EAAQiB,MACjB,CAACA,IAEJI,qBAAU,WACRlB,EAAoBW,EAAmBD,GACvC,IAAMS,EAAUC,YAAW,WACzBC,cAAYC,QAAQ,kDACnB,KACH,OAAO,kBAAMC,aAAaJ,MACzB,CAACH,IAGF,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CACEJ,GAAI8B,EACJ7B,MAAM,QACNC,MAAOgC,EACP/B,SAAU,SAAAyC,GAAK,OAAIT,EAASS,EAAMC,OAAO3C,UAE3C,kBAAC,EAAD,CAAgBF,GAAI+B,EAAmB9B,MAAM,SAASC,MAAOkC,IAC7D,kBAAC,kBAAD,CAAiBU,MAAOL,cAAaM,SAAUC,0BAAwBC,WAAYC,iBAAe,MCvBpFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2DCZN6C,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASC,eAAe,SD2H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.757e2e62.chunk.js","sourcesContent":["import React from 'react';\n\nconst CustomTextArea = ({ id, title, value, onChange = null }) => (\n  <div>\n    <div className=\"textwrapper\">\n      <label htmlFor={id}>{title}</label>\n      <textarea id={id} value={value} onChange={onChange} />\n    </div>\n  </div>\n);\n\nexport default CustomTextArea;\n","export const DEFAULT_DATE_FORMAT = 'DD/MM/YY';\nexport const DEFAULT_DAYS_OFFSET = 112;\n\nexport const DATE_REGEX = /(\\d\\d\\/\\d\\d\\/\\d\\d)/g;\n","import moment from 'moment';\nimport { DEFAULT_DATE_FORMAT, DEFAULT_DAYS_OFFSET, DATE_REGEX } from './constants';\n\nfunction replacer(match, date, offset, string) {\n  return moment(date, DEFAULT_DATE_FORMAT)\n    .add(DEFAULT_DAYS_OFFSET, 'days')\n    .format(DEFAULT_DATE_FORMAT);\n}\n\nexport const convert = text => text.replace(DATE_REGEX, replacer);\n\nexport const copyTextByElementId = (elementId, originElementId) => {\n  const element = document.getElementById(elementId);\n\n  element.select();\n  element.setSelectionRange(0, 99999); /*For mobile devices*/\n\n  document.execCommand('copy');\n\n  const originElement = document.getElementById(originElementId);\n  originElement.focus();\n};\n","import React, { useState, useEffect } from 'react';\nimport { ToastsContainer, ToastsContainerPosition, ToastsStore } from 'react-toasts';\n\nimport './App.css';\nimport CustomTextArea from './components/CustomTextArea';\nimport { convert, copyTextByElementId } from './utils';\n\nconst INPUT_ELEMENT_ID = 'input';\nconst OUTPUT_ELEMENT_ID = 'output';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n\n  useEffect(() => {\n    setOutput(convert(input));\n  }, [input]);\n\n  useEffect(() => {\n    copyTextByElementId(OUTPUT_ELEMENT_ID, INPUT_ELEMENT_ID);\n    const timeout = setTimeout(() => {\n      ToastsStore.success('Listo! El output fue copiado al portapapeles');\n    }, 1000);\n    return () => clearTimeout(timeout);\n  }, [output]);\n\n  return (\n    <div className=\"App\">\n      <CustomTextArea\n        id={INPUT_ELEMENT_ID}\n        title=\"Input\"\n        value={input}\n        onChange={event => setInput(event.target.value)}\n      />\n      <CustomTextArea id={OUTPUT_ELEMENT_ID} title=\"Output\" value={output} />\n      <ToastsContainer store={ToastsStore} position={ToastsContainerPosition.TOP_CENTER} lightBackground />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}